library(DBI)
library(RMySQL)
library(dplyr)
library(readr)
library(glue)
# 1. Konfigurasi Database
db_config <- list(
host = "127.0.0.1",
port = 3306,
user = "root",
password = "",
dbname = "projecttransactiondatabase"
)
# 2. Koneksi ke MySQL Server (Tanpa Database Spesifik)
con <- dbConnect(
MySQL(),
host = db_config$host,
port = db_config$port,
user = db_config$user,
password = db_config$password
)
# 3. Hapus Database Jika Sudah Ada (Untuk Mencegah Konflik)
tryCatch({
dbExecute(con, glue("DROP DATABASE IF EXISTS {db_config$dbname}"))
message("Database lama dihapus")
}, error = function(e) {
message("Gagal menghapus database: ", e$message)
})
# 4. Buat Database Baru
tryCatch({
dbExecute(con, glue("CREATE DATABASE {db_config$dbname}"))
message("Database ", db_config$dbname, " berhasil dibuat")
}, error = function(e) {
message("Gagal membuat database: ", e$message)
})
# 5. Koneksi ke Database yang Baru Dibuat
con_db <- dbConnect(
MySQL(),
host = db_config$host,
port = db_config$port,
user = db_config$user,
password = db_config$password,
dbname = db_config$dbname
)
# 6. Definisi Tabel
table_definitions <- list(
cabang = "
CREATE TABLE IF NOT EXISTS cabang (
ID_Cabang VARCHAR(100) PRIMARY KEY,
ID_Produk INT,
kota VARCHAR(100),
jumlah_stock INT
) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
",
produk = "
CREATE TABLE IF NOT EXISTS produk (
ID_Produk INT AUTO_INCREMENT PRIMARY KEY,
Kategori_Produk VARCHAR(100),
Harga_Satuan DECIMAL(10,2),
Kuantitas INT,
Total_Harga DECIMAL(15,2),
ID_Cabang VARCHAR(100),
FOREIGN KEY (ID_Cabang) REFERENCES cabang(ID_Cabang)
ON DELETE CASCADE
ON UPDATE CASCADE
) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
",
pelanggan = "
CREATE TABLE IF NOT EXISTS pelanggan (
ID_Pelanggan VARCHAR(100) PRIMARY KEY,
Tipe_Pelanggan ENUM('Member', 'Normal') NOT NULL,
Jenis_Kelamin ENUM('Laki-Laki', 'Perempuan') NOT NULL
) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
",
invoice = "
CREATE TABLE IF NOT EXISTS invoice (
ID_Invoice VARCHAR(100) PRIMARY KEY,
ID_Produk INT,
ID_Cabang VARCHAR(100),
ID_Pelanggan VARCHAR(100),
Total DECIMAL(15,2),
Tanggal DATE,
Waktu TIME,
Pembayaran ENUM('Ewallet', 'Cash', 'Credit card'),
Penilaian DECIMAL(3,1),
FOREIGN KEY (ID_Produk) REFERENCES produk(ID_Produk)
ON DELETE CASCADE
ON UPDATE CASCADE,
FOREIGN KEY (ID_Cabang) REFERENCES cabang(ID_Cabang)
ON DELETE CASCADE
ON UPDATE CASCADE,
FOREIGN KEY (ID_Pelanggan) REFERENCES pelanggan(ID_Pelanggan)
ON DELETE CASCADE
ON UPDATE CASCADE
) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
",
stock = "
CREATE TABLE IF NOT EXISTS stock (
ID_Produk INT NOT NULL,
ID_Cabang VARCHAR(100) NOT NULL,
Jumlah_Stock INT NOT NULL,
Tanggal_Update DATE NOT NULL,
FOREIGN KEY (ID_Produk) REFERENCES produk(ID_Produk)
ON DELETE CASCADE
ON UPDATE CASCADE,
FOREIGN KEY (ID_Cabang) REFERENCES cabang(ID_Cabang)
ON DELETE CASCADE
ON UPDATE CASCADE
) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
"
)
# 7. Eksekusi Pembuatan Tabel
tryCatch({
# Buka koneksi ke database spesifik
con_db <- dbConnect(
MySQL(),
host = db_config$host,
port = db_config$port,
user = db_config$user,
password = db_config$password,
dbname = db_config$dbname
)
# Mulai transaksi
dbBegin(con_db)
for (table_name in names(table_definitions)) {
dbExecute(con_db, table_definitions[[table_name]])
message("Tabel ", table_name, " berhasil dibuat")
}
dbCommit(con_db)
# 8. Cek Tabel yang Ada di Database
existing_tables <- dbGetQuery(con_db, "SHOW TABLES")
message("\nTabel yang tersedia di database ", db_config$dbname, ":")
print(existing_tables)
}, error = function(e) {
dbRollback(con_db)
message("Error membuat tabel: ", e$message)
}, finally = {
dbDisconnect(con_db)
dbDisconnect(con)
message("\nKoneksi database ditutup")
})
con_db <- dbConnect(
MySQL(),
host = db_config$host,
port = db_config$port,
user = db_config$user,
password = db_config$password,
dbname = db_config$dbname
)
# Lihat struktur tabel users
dbGetQuery(con_db, "DESCRIBE cabang")
dbDisconnect(con_db)
## 6. Import Data
### Sambungkan ke Database MySQL
library(DBI)
library(RMySQL)
con_db <- dbConnect(
MySQL(),
host = db_config$host,
port = db_config$port,
user = db_config$user,
password = db_config$password,
dbname = db_config$dbname
)
#7. Baca Data dari CSV
#data cabang
cabang <- read.csv("D://zkuliah2//SMT 2//Manajemen Data Statistika//Project-Transaction-Database//Data//data_cabang.csv", stringsAsFactors = FALSE)
head(cabang)  # Cek apakah data terbaca dengan benar
#data invoice
invoice <- read.csv("D://zkuliah2//SMT 2//Manajemen Data Statistika//Project-Transaction-Database//Data//data_invoice.csv", stringsAsFactors = FALSE)
head(invoice)  # Cek apakah data terbaca dengan benar
#data pelanggan
pelanggan <- read.csv("D://zkuliah2//SMT 2//Manajemen Data Statistika//Project-Transaction-Database//Data//data_pelanggan.csv", stringsAsFactors = FALSE)
head(pelanggan)  # Cek apakah data terbaca dengan benar
#data produk
produk<- read.csv("D://zkuliah2//SMT 2//Manajemen Data Statistika//Project-Transaction-Database//Data//data_produk.csv", stringsAsFactors = FALSE)
head(produk)
#data stock
stock <- read.csv("D://zkuliah2//SMT 2//Manajemen Data Statistika//Project-Transaction-Database//Data//data_stock.csv", stringsAsFactors = FALSE)
head(stock)  # Cek apakah data terbaca dengan benar
#8. Masukkan Data ke MySQL
library(DBI)
#cabang
for (i in 1:nrow(cabang)) {
query <- sprintf("INSERT INTO cabang (ID_Cabang, ID_Produk, Kota, jumlah_stock ) VALUES ('%s', '%s', '%s','%s')",
cabang$ID_Cabang[i], cabang$ID_Produk[i], cabang$Kota[i], cabang$Jumlah_Stock[i])
dbExecute(con_db, query)
}
#produk
for (i in 1:nrow(produk)) {
query <- sprintf("INSERT INTO produk (ID_Produk, Kategori_Produk, Harga_Satuan, Kuantitas, Total_Harga, ID_Cabang)
VALUES ('%s', '%s', '%s', '%s', '%s', '%s')",
produk$ID_Produk[i], produk$Kategori_Produk[i], produk$Harga_Satuan[i],
produk$Kuantitas[i], produk$Total_Harga[i], produk$ID_Cabang[i])
dbExecute(con_db, query)
}
#Pelanggan
for (i in 1:nrow(pelanggan)) {
query <- sprintf("INSERT INTO pelanggan (ID_Pelanggan, Tipe_Pelanggan, Jenis_Kelamin) VALUES ('%s', '%s', '%s')",          pelanggan$ID_Pelanggan[i], pelanggan$Tipe_Pelanggan[i], pelanggan$Jenis_Kelamin[i])
dbExecute(con_db, query)
}
#invoice
for (i in 1:nrow(invoice)) {
query <- sprintf("INSERT INTO invoice (ID_Invoice, ID_Produk, ID_Cabang, ID_Pelanggan, Total, Tanggal, Waktu, Pembayaran, Penilaian) VALUES ('%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s')",
invoice$ID_Invoice[i], invoice$ID_Produk[i], invoice$ID_Cabang[i], invoice$ID_Pelanggan[i], invoice$Total[i], invoice$Tanggal[i], invoice$Waktu[i], invoice$Pembayaran[i], invoice$Penilaian[i])
dbExecute(con_db, query)
}
#stock
for (i in 1:nrow(stock)) {
query <- sprintf("INSERT INTO stock (ID_Produk, ID_Cabang, Jumlah_Stock, Tanggal_Update) VALUES ('%s', '%s', '%s', '%s')", stock$ID_Produk[i], stock$ID_Cabang[i], stock$Jumlah_Stock[i], stock$Tanggal_Update[i])
dbExecute(con_db, query)
}
